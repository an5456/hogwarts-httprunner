{
  "uid" : "bb6172a24322a254",
  "name" : "test_get_home_page",
  "fullName" : "test_testcase.TestSingle#test_get_home_page",
  "historyId" : "9c95dab400b4a6de89dedd0371d0cc61",
  "time" : {
    "start" : 1577707283654,
    "stop" : 1577707284042,
    "duration" : 388
  },
  "description" : "测试呵呵呵呵",
  "descriptionHtml" : "<p>测试呵呵呵呵</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <tests.test_testcase.TestSingle object at 0x10b9fc860>\n\n    @allure.story(\"测试4\")\n    def test_get_home_page(self):\n        \"\"\"测试呵呵呵呵\"\"\"\n>       Result.result_assert(\"api\", \"get_home_page.yml\")\n\ntest_testcase.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'htturunner.result_assert.Result'>, path_1 = 'api', filename = 'get_home_page.yml'\n\n    @classmethod\n    def result_assert(cls, path_1, filename):\n        single_testcase_yaml = os.path.join(os.path.dirname(os.path.dirname(__file__)), \"tests\", path_1, filename)\n        result = cls.run.run_yml(single_testcase_yaml)\n        for ass in result[0]:\n            if ass.get(\"csv_name\"):\n                logging.info(20 * \"=\" + ass[\"name\"] + \"--\"+ ass[\"csv_name\"] + 20 * \"=\")\n            else:\n                logging.info(20 * \"=\" + ass[\"name\"] + 20 * \"=\")\n            logging.info(\"url:\" + ass[\"url\"])\n            logging.info(\"method:\" + ass[\"method\"])\n            if ass[\"request_info\"].get(\"type\") == \"json\":\n                logging.info(\"request_data:\" + \"\\n\" + Utils.format_output(ass[\"request_data\"]))\n                logging.info(\"response_data:\" + \"\\n\" + Utils.format_output(ass[\"response_data\"]))\n            else:\n                logging.info(\"request_data:\" + str(ass[\"request_data\"]))\n                logging.info(\"response_data:\" + str(ass[\"response_data\"]))\n            logging.info(10 * \"-\" + \"Assert\" + 10 * \"-\")\n            for vale in ass[\"assert_data\"]:\n                logging.info(\"{} expected:{} actual:{}\".format(vale[\"key\"], vale[\"expected\"], vale[\"actual\"]))\n>               assert vale[\"expected\"] == vale[\"actual\"]\nE               AssertionError\n\n../htturunner/result_assert.py:30: AssertionError",
  "flaky" : false,
  "beforeStages" : [ {
    "name" : "_Module__pytest_setup_module",
    "time" : {
      "start" : 1577707282149,
      "stop" : 1577707282149,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "测试呵呵呵呵",
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <tests.test_testcase.TestSingle object at 0x10b9fc860>\n\n    @allure.story(\"测试4\")\n    def test_get_home_page(self):\n        \"\"\"测试呵呵呵呵\"\"\"\n>       Result.result_assert(\"api\", \"get_home_page.yml\")\n\ntest_testcase.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'htturunner.result_assert.Result'>, path_1 = 'api', filename = 'get_home_page.yml'\n\n    @classmethod\n    def result_assert(cls, path_1, filename):\n        single_testcase_yaml = os.path.join(os.path.dirname(os.path.dirname(__file__)), \"tests\", path_1, filename)\n        result = cls.run.run_yml(single_testcase_yaml)\n        for ass in result[0]:\n            if ass.get(\"csv_name\"):\n                logging.info(20 * \"=\" + ass[\"name\"] + \"--\"+ ass[\"csv_name\"] + 20 * \"=\")\n            else:\n                logging.info(20 * \"=\" + ass[\"name\"] + 20 * \"=\")\n            logging.info(\"url:\" + ass[\"url\"])\n            logging.info(\"method:\" + ass[\"method\"])\n            if ass[\"request_info\"].get(\"type\") == \"json\":\n                logging.info(\"request_data:\" + \"\\n\" + Utils.format_output(ass[\"request_data\"]))\n                logging.info(\"response_data:\" + \"\\n\" + Utils.format_output(ass[\"response_data\"]))\n            else:\n                logging.info(\"request_data:\" + str(ass[\"request_data\"]))\n                logging.info(\"response_data:\" + str(ass[\"response_data\"]))\n            logging.info(10 * \"-\" + \"Assert\" + 10 * \"-\")\n            for vale in ass[\"assert_data\"]:\n                logging.info(\"{} expected:{} actual:{}\".format(vale[\"key\"], vale[\"expected\"], vale[\"actual\"]))\n>               assert vale[\"expected\"] == vale[\"actual\"]\nE               AssertionError\n\n../htturunner/result_assert.py:30: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "bf22c8e41a061dea",
      "name" : "log",
      "source" : "bf22c8e41a061dea.txt",
      "type" : "text/plain",
      "size" : 13689
    }, {
      "uid" : "518f30ddbd1eb1df",
      "name" : "stdout",
      "source" : "518f30ddbd1eb1df.txt",
      "type" : "text/plain",
      "size" : 0
    }, {
      "uid" : "12198ea23b1e9faf",
      "name" : "stderr",
      "source" : "12198ea23b1e9faf.txt",
      "type" : "text/plain",
      "size" : 0
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "_Module__pytest_setup_module::0",
    "time" : {
      "start" : 1577707284048,
      "stop" : 1577707284048,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "测试接口"
  }, {
    "name" : "story",
    "value" : "测试4"
  }, {
    "name" : "suite",
    "value" : "test_testcase"
  }, {
    "name" : "subSuite",
    "value" : "TestSingle"
  }, {
    "name" : "host",
    "value" : "anxiaodongdeMacBook-Pro.local"
  }, {
    "name" : "thread",
    "value" : "35919-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_testcase"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "bb6172a24322a254.json",
  "parameterValues" : [ ]
}