{
  "uid" : "c8eacaac03ee44",
  "name" : "test_update_department",
  "fullName" : "test_weixin_apart.TestApart#test_update_department",
  "historyId" : "0b207a42cf244f1b321ce68a1dc0349e",
  "time" : {
    "start" : 1578149607661,
    "stop" : 1578149607973,
    "duration" : 312
  },
  "description" : "修改部门名称",
  "descriptionHtml" : "<p>修改部门名称</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <tests.test_weixin_apart.TestApart object at 0x10bb347f0>\n\n    @allure.story(\"修改部门名称\")\n    def test_update_department(self):\n        \"\"\"修改部门名称\"\"\"\n>       Result.result_assert(\"api\", \"get_weixin_update_department.yml\")\n\ntest_weixin_apart.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'htturunner.result_assert.Result'>, path_1 = 'api'\nfilename = 'get_weixin_update_department.yml'\n\n    @classmethod\n    def result_assert(cls, path_1, filename):\n        single_testcase_yaml = os.path.join(os.path.dirname(os.path.dirname(__file__)), \"tests\", path_1, filename)\n        result = cls.run.run_yml(single_testcase_yaml)\n    \n        if len(result) > 1:\n            result1 = []\n            if isinstance(result[0][0], list):\n                for res in result:\n                    for r in res:\n                        result = r[0]\n                        result1.append(result)\n                result = result1\n            else:\n                for res in result:\n                    result = res[0][0]\n                    result1.append(result)\n                result = result1\n        elif len(result) > 1 and isinstance(result[0][0], list):\n            result1 = []\n            for res in result[0]:\n                for r in res:\n                    result = r[0]\n                    result1.append(result)\n            result = result1\n        elif len(result[0]) > 1:\n            result2 = []\n            for res in result[0]:\n                result = res[0]\n                result2.append(result)\n            result = result2\n        else:\n            result = result[0][0]\n    \n        for ass in result:\n            if ass.get(\"csv_name\"):\n                logging.info(20 * \"=\" + ass[\"name\"] + \"--\" + ass[\"csv_name\"] + 20 * \"=\")\n            else:\n                logging.info(20 * \"=\" + ass[\"name\"] + 20 * \"=\")\n            logging.info(\"url:\" + ass[\"url\"])\n            logging.info(\"method:\" + ass[\"method\"])\n            if ass[\"request_info\"].get(\"type\") == \"json\":\n                logging.info(\"request_data:\" + \"\\n\" + Utils.format_output(ass[\"request_data\"]))\n                logging.info(\"response_data:\" + \"\\n\" + Utils.format_output(ass[\"response_data\"]))\n            else:\n                logging.info(\"request_data:\" + str(ass[\"request_data\"]))\n                logging.info(\"response_data:\" + str(ass[\"response_data\"]))\n            logging.info(10 * \"-\" + \"Assert\" + 10 * \"-\")\n            for vale in ass[\"assert_data\"]:\n                if vale[\"expected\"] == vale[\"actual\"]:\n                    logging.info(\"{} expected:{} actual:{} PASS\".format(vale[\"key\"], vale[\"expected\"], vale[\"actual\"]))\n                else:\n                    logging.info(\"{} expected:{} actual:{} FAIL\".format(vale[\"key\"], vale[\"expected\"], vale[\"actual\"]))\n>                   raise AssertionError\nE                   AssertionError\n\n../htturunner/result_assert.py:63: AssertionError",
  "flaky" : false,
  "beforeStages" : [ {
    "name" : "_Class__pytest_setup_class",
    "time" : {
      "start" : 1578149606879,
      "stop" : 1578149607238,
      "duration" : 359
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_log",
    "time" : {
      "start" : 1578149606879,
      "stop" : 1578149606879,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "修改部门名称",
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <tests.test_weixin_apart.TestApart object at 0x10bb347f0>\n\n    @allure.story(\"修改部门名称\")\n    def test_update_department(self):\n        \"\"\"修改部门名称\"\"\"\n>       Result.result_assert(\"api\", \"get_weixin_update_department.yml\")\n\ntest_weixin_apart.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'htturunner.result_assert.Result'>, path_1 = 'api'\nfilename = 'get_weixin_update_department.yml'\n\n    @classmethod\n    def result_assert(cls, path_1, filename):\n        single_testcase_yaml = os.path.join(os.path.dirname(os.path.dirname(__file__)), \"tests\", path_1, filename)\n        result = cls.run.run_yml(single_testcase_yaml)\n    \n        if len(result) > 1:\n            result1 = []\n            if isinstance(result[0][0], list):\n                for res in result:\n                    for r in res:\n                        result = r[0]\n                        result1.append(result)\n                result = result1\n            else:\n                for res in result:\n                    result = res[0][0]\n                    result1.append(result)\n                result = result1\n        elif len(result) > 1 and isinstance(result[0][0], list):\n            result1 = []\n            for res in result[0]:\n                for r in res:\n                    result = r[0]\n                    result1.append(result)\n            result = result1\n        elif len(result[0]) > 1:\n            result2 = []\n            for res in result[0]:\n                result = res[0]\n                result2.append(result)\n            result = result2\n        else:\n            result = result[0][0]\n    \n        for ass in result:\n            if ass.get(\"csv_name\"):\n                logging.info(20 * \"=\" + ass[\"name\"] + \"--\" + ass[\"csv_name\"] + 20 * \"=\")\n            else:\n                logging.info(20 * \"=\" + ass[\"name\"] + 20 * \"=\")\n            logging.info(\"url:\" + ass[\"url\"])\n            logging.info(\"method:\" + ass[\"method\"])\n            if ass[\"request_info\"].get(\"type\") == \"json\":\n                logging.info(\"request_data:\" + \"\\n\" + Utils.format_output(ass[\"request_data\"]))\n                logging.info(\"response_data:\" + \"\\n\" + Utils.format_output(ass[\"response_data\"]))\n            else:\n                logging.info(\"request_data:\" + str(ass[\"request_data\"]))\n                logging.info(\"response_data:\" + str(ass[\"response_data\"]))\n            logging.info(10 * \"-\" + \"Assert\" + 10 * \"-\")\n            for vale in ass[\"assert_data\"]:\n                if vale[\"expected\"] == vale[\"actual\"]:\n                    logging.info(\"{} expected:{} actual:{} PASS\".format(vale[\"key\"], vale[\"expected\"], vale[\"actual\"]))\n                else:\n                    logging.info(\"{} expected:{} actual:{} FAIL\".format(vale[\"key\"], vale[\"expected\"], vale[\"actual\"]))\n>                   raise AssertionError\nE                   AssertionError\n\n../htturunner/result_assert.py:63: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "12dde60877ca72ac",
      "name" : "log",
      "source" : "12dde60877ca72ac.txt",
      "type" : "text/plain",
      "size" : 2244
    }, {
      "uid" : "15a522428251a698",
      "name" : "stdout",
      "source" : "15a522428251a698.txt",
      "type" : "text/plain",
      "size" : 0
    }, {
      "uid" : "6b345a6538d2a470",
      "name" : "stderr",
      "source" : "6b345a6538d2a470.txt",
      "type" : "text/plain",
      "size" : 0
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "_Class__pytest_setup_class::0",
    "time" : {
      "start" : 1578149608405,
      "stop" : 1578149608405,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "部门管理"
  }, {
    "name" : "story",
    "value" : "修改部门名称"
  }, {
    "name" : "suite",
    "value" : "test_weixin_apart"
  }, {
    "name" : "subSuite",
    "value" : "TestApart"
  }, {
    "name" : "host",
    "value" : "anxiaodongdeMacBook-Pro.local"
  }, {
    "name" : "thread",
    "value" : "4641-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_weixin_apart"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "c8eacaac03ee44.json",
  "parameterValues" : [ ]
}