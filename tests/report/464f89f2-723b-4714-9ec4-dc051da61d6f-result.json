{"name": "test_update_department", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <tests.test_weixin_apart.TestApart object at 0x10bb347f0>\n\n    @allure.story(\"修改部门名称\")\n    def test_update_department(self):\n        \"\"\"修改部门名称\"\"\"\n>       Result.result_assert(\"api\", \"get_weixin_update_department.yml\")\n\ntest_weixin_apart.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'htturunner.result_assert.Result'>, path_1 = 'api'\nfilename = 'get_weixin_update_department.yml'\n\n    @classmethod\n    def result_assert(cls, path_1, filename):\n        single_testcase_yaml = os.path.join(os.path.dirname(os.path.dirname(__file__)), \"tests\", path_1, filename)\n        result = cls.run.run_yml(single_testcase_yaml)\n    \n        if len(result) > 1:\n            result1 = []\n            if isinstance(result[0][0], list):\n                for res in result:\n                    for r in res:\n                        result = r[0]\n                        result1.append(result)\n                result = result1\n            else:\n                for res in result:\n                    result = res[0][0]\n                    result1.append(result)\n                result = result1\n        elif len(result) > 1 and isinstance(result[0][0], list):\n            result1 = []\n            for res in result[0]:\n                for r in res:\n                    result = r[0]\n                    result1.append(result)\n            result = result1\n        elif len(result[0]) > 1:\n            result2 = []\n            for res in result[0]:\n                result = res[0]\n                result2.append(result)\n            result = result2\n        else:\n            result = result[0][0]\n    \n        for ass in result:\n            if ass.get(\"csv_name\"):\n                logging.info(20 * \"=\" + ass[\"name\"] + \"--\" + ass[\"csv_name\"] + 20 * \"=\")\n            else:\n                logging.info(20 * \"=\" + ass[\"name\"] + 20 * \"=\")\n            logging.info(\"url:\" + ass[\"url\"])\n            logging.info(\"method:\" + ass[\"method\"])\n            if ass[\"request_info\"].get(\"type\") == \"json\":\n                logging.info(\"request_data:\" + \"\\n\" + Utils.format_output(ass[\"request_data\"]))\n                logging.info(\"response_data:\" + \"\\n\" + Utils.format_output(ass[\"response_data\"]))\n            else:\n                logging.info(\"request_data:\" + str(ass[\"request_data\"]))\n                logging.info(\"response_data:\" + str(ass[\"response_data\"]))\n            logging.info(10 * \"-\" + \"Assert\" + 10 * \"-\")\n            for vale in ass[\"assert_data\"]:\n                if vale[\"expected\"] == vale[\"actual\"]:\n                    logging.info(\"{} expected:{} actual:{} PASS\".format(vale[\"key\"], vale[\"expected\"], vale[\"actual\"]))\n                else:\n                    logging.info(\"{} expected:{} actual:{} FAIL\".format(vale[\"key\"], vale[\"expected\"], vale[\"actual\"]))\n>                   raise AssertionError\nE                   AssertionError\n\n../htturunner/result_assert.py:63: AssertionError"}, "description": "修改部门名称", "attachments": [{"name": "log", "source": "4ad37bc5-e8d9-4943-a1bb-02eb460ae9a0-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "b9da7676-795a-4b73-a3cc-97ca1243fd1c-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "d37c50c6-7350-4325-93f6-a5ae1bd4dad5-attachment.txt", "type": "text/plain"}], "start": 1578149607661, "stop": 1578149607973, "uuid": "570a49ae-b7af-45d8-bfcb-bbabfc797ce0", "historyId": "0b207a42cf244f1b321ce68a1dc0349e", "fullName": "test_weixin_apart.TestApart#test_update_department", "labels": [{"name": "feature", "value": "部门管理"}, {"name": "story", "value": "修改部门名称"}, {"name": "suite", "value": "test_weixin_apart"}, {"name": "subSuite", "value": "TestApart"}, {"name": "host", "value": "anxiaodongdeMacBook-Pro.local"}, {"name": "thread", "value": "4641-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_weixin_apart"}]}